<Activity mc:Ignorable="sap sap2010" x:Class="Main" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="594,1456" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Web</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>System.Security.Cryptography</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Security.Cryptography.Pkcs</x:String>
      <x:String>UiPathTeam.GenerateRandomPassword.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Web</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Algorithms</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Pkcs</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Encoding</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.ProtectedData</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.OpenSsl</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Cng</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Csp</AssemblyReference>
      <AssemblyReference>System.Text.Encoding.CodePages</AssemblyReference>
      <AssemblyReference>UiPathTeam.GenerateRandomPassword.Activities</AssemblyReference>
      <AssemblyReference>System.Private.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Main Sequence" sap:VirtualizedContainerService.HintSize="512,1391.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="soapBody" />
      <Variable x:TypeArguments="x:String" Default="https://nodeD1.test.webservices.amadeus.com/1ASIWTVKTKA" Name="endPoint" />
      <Variable x:TypeArguments="x:String" Name="resContent" />
      <Variable x:TypeArguments="x:Int32" Name="resStatus" />
      <Variable x:TypeArguments="x:String" Name="credNonce" />
      <Variable x:TypeArguments="x:String" Name="credCreated" />
      <Variable x:TypeArguments="x:String" Name="credPassword" />
      <Variable x:TypeArguments="x:String" Name="testPassword" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="string nonce;&#xA;byte[] nonceValue = new byte[16];&#xA;new System.Random().NextBytes(nonceValue);&#xA;nonce = Convert.ToBase64String(nonceValue);&#xA;&#xA;DateTime now = DateTime.UtcNow;&#xA;string created = now.ToString(&quot;yyyy-MM-dd'T'HH:mm:ss.fff'Z'&quot;);&#xA;string password = &quot;kx!BYNe9&quot;; // Base64-encoded &quot;abcdef&quot;&#xA;&#xA;byte[] encryptedPassword;&#xA;using (System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed())&#xA;{&#xA;    byte[] passwordBytes = Encoding.UTF8.GetBytes(password);&#xA;    encryptedPassword = sha1.ComputeHash(passwordBytes);&#xA;}&#xA;&#xA;byte[] b1 = !string.IsNullOrEmpty(nonce) ? Convert.FromBase64String(nonce) : new byte[0];&#xA;byte[] b2 = Encoding.UTF8.GetBytes(created);&#xA;byte[] b3 = encryptedPassword;&#xA;byte[] b4 = new byte[b1.Length + b2.Length + b3.Length];&#xA;&#xA;int offset = 0;&#xA;Buffer.BlockCopy(b1, 0, b4, offset, b1.Length);&#xA;offset += b1.Length;&#xA;Buffer.BlockCopy(b2, 0, b4, offset, b2.Length);&#xA;offset += b2.Length;&#xA;Buffer.BlockCopy(b3, 0, b4, offset, b3.Length);&#xA;&#xA;byte[] digestBytes;&#xA;using (System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed())&#xA;{&#xA;    digestBytes = sha1.ComputeHash(b4);&#xA;}&#xA;&#xA;string passwordDigest = Convert.ToBase64String(digestBytes);&#xA;&#xA;out_created = created;&#xA;out_nonce = nonce;&#xA;out_password = passwordDigest;&#xA;&#xA;// Output the results&#xA;Console.WriteLine($&quot;Nonce: {nonce}&quot;);&#xA;Console.WriteLine($&quot;Created: {created}&quot;);&#xA;Console.WriteLine($&quot;Password Digest: {passwordDigest}&quot;);&#xA;" DisplayName="Invoke Code Generate API Credential" sap:VirtualizedContainerService.HintSize="450,165.33333333333334" sap2010:WorkflowViewState.IdRef="InvokeCode_3" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <OutArgument x:TypeArguments="x:String" x:Key="out_nonce">[credNonce]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_created">[credCreated]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_password">[credPassword]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="// Dummy data&#xD;&#xA;string varMessageId = &quot;WsbConsu-JOhHD9njUTWYZ8wb2XtA35eRF40kS1M-gxXwDOevW&quot;;&#xD;&#xA;string varAction = &quot;http://webservices.amadeus.com/HSFREQ_07_3_1A&quot;;&#xD;&#xA;string varTo = &quot;https://nodeD1.test.webservices.amadeus.com/1ASIWTVKTKA/1ASIWTVKTKA&quot;;&#xD;&#xA;string varUserName = &quot;WSTKATVK&quot;;&#xD;&#xA;string varNonce = in_nonce;&#xD;&#xA;string varPass = in_password;&#xD;&#xA;string varCreated = in_created;&#xD;&#xA;string varCityCode = &quot;JKTTV28AA&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Create the XmlDocument&#xD;&#xA;XmlDocument xmlDoc = new XmlDocument();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Create the root element&#xD;&#xA;XmlElement envelopeElement = xmlDoc.CreateElement(&quot;soapenv&quot;, &quot;Envelope&quot;, &quot;http://schemas.xmlsoap.org/soap/envelope/&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:soapenv&quot;, &quot;http://schemas.xmlsoap.org/soap/envelope/&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:sec&quot;, &quot;http://xml.amadeus.com/2010/06/Security_v1&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:typ&quot;, &quot;http://xml.amadeus.com/2010/06/Types_v1&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:iat&quot;, &quot;http://www.iata.org/IATA/2007/00/IATA2010.1&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:app&quot;, &quot;http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:link&quot;, &quot;http://wsdl.amadeus.com/2010/06/ws/Link_v1&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:ses&quot;, &quot;http://xml.amadeus.com/2010/06/Session_v3&quot;);&#xD;&#xA;envelopeElement.SetAttribute(&quot;xmlns:hsf&quot;, &quot;http://xml.amadeus.com/HSFREQ_07_3_1A&quot;);&#xD;&#xA;xmlDoc.AppendChild(envelopeElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Create the Header element&#xD;&#xA;XmlElement headerElement = xmlDoc.CreateElement(&quot;soapenv&quot;, &quot;Header&quot;, &quot;http://schemas.xmlsoap.org/soap/envelope/&quot;);&#xD;&#xA;envelopeElement.AppendChild(headerElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add namespaces for Header&#xD;&#xA;headerElement.SetAttribute(&quot;xmlns:add&quot;, &quot;http://www.w3.org/2005/08/addressing&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add MessageID, Action, and To elements&#xD;&#xA;XmlElement messageIdElement = xmlDoc.CreateElement(&quot;add&quot;, &quot;MessageID&quot;, &quot;http://www.w3.org/2005/08/addressing&quot;);&#xD;&#xA;messageIdElement.InnerText = varMessageId;&#xD;&#xA;headerElement.AppendChild(messageIdElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;XmlElement actionElement = xmlDoc.CreateElement(&quot;add&quot;, &quot;Action&quot;, &quot;http://www.w3.org/2005/08/addressing&quot;);&#xD;&#xA;actionElement.InnerText = varAction;&#xD;&#xA;headerElement.AppendChild(actionElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;XmlElement toElement = xmlDoc.CreateElement(&quot;add&quot;, &quot;To&quot;, &quot;http://www.w3.org/2005/08/addressing&quot;);&#xD;&#xA;toElement.InnerText = varTo;&#xD;&#xA;headerElement.AppendChild(toElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add Security element&#xD;&#xA;XmlElement securityElement = xmlDoc.CreateElement(&quot;oas&quot;, &quot;Security&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;headerElement.AppendChild(securityElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;securityElement.SetAttribute(&quot;xmlns:oas&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;securityElement.SetAttribute(&quot;xmlns:oas1&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//Username Token Element&#xD;&#xA;XmlElement usernameTokenElement = xmlDoc.CreateElement(&quot;oas&quot;, &quot;UsernameToken&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;securityElement.AppendChild(usernameTokenElement);&#xD;&#xA;&#xD;&#xA;XmlAttribute idAttribute = xmlDoc.CreateAttribute(&quot;oas1&quot;, &quot;Id&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;);&#xD;&#xA;idAttribute.Value = &quot;UsernameToken-1&quot;;&#xD;&#xA;usernameTokenElement.Attributes.Append(idAttribute);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;XmlElement usernameElement = xmlDoc.CreateElement(&quot;oas&quot;, &quot;Username&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;usernameElement.InnerText = varUserName;&#xD;&#xA;usernameTokenElement.AppendChild(usernameElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add Nonce element&#xD;&#xA;XmlElement nonceElement = xmlDoc.CreateElement(&quot;oas&quot;, &quot;Nonce&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;nonceElement.SetAttribute(&quot;EncodingType&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary&quot;);&#xD;&#xA;nonceElement.InnerText = varNonce;&#xD;&#xA;usernameTokenElement.AppendChild(nonceElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add Password element&#xD;&#xA;XmlElement passwordElement = xmlDoc.CreateElement(&quot;oas&quot;, &quot;Password&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;);&#xD;&#xA;passwordElement.SetAttribute(&quot;Type&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest&quot;);&#xD;&#xA;passwordElement.InnerText = varPass;&#xD;&#xA;usernameTokenElement.AppendChild(passwordElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add Created Element&#xD;&#xA;XmlElement createdElement = xmlDoc.CreateElement(&quot;oas1&quot;, &quot;Created&quot;, &quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;);&#xD;&#xA;createdElement.InnerText = varCreated;&#xD;&#xA;usernameTokenElement.AppendChild(createdElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add AMA_SecurityHostedUser element&#xD;&#xA;XmlElement securityHostedUserElement = xmlDoc.CreateElement(&quot;&quot;, &quot;AMA_SecurityHostedUser&quot;, &quot;http://xml.amadeus.com/2010/06/Security_v1&quot;);&#xD;&#xA;headerElement.AppendChild(securityHostedUserElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;XmlElement userIDElement = xmlDoc.CreateElement(&quot;&quot;, &quot;UserID&quot;, &quot;http://xml.amadeus.com/2010/06/Security_v1&quot;);&#xD;&#xA;userIDElement.SetAttribute(&quot;AgentDutyCode&quot;, &quot;SU&quot;);&#xD;&#xA;userIDElement.SetAttribute(&quot;RequestorType&quot;, &quot;U&quot;);&#xD;&#xA;userIDElement.SetAttribute(&quot;PseudoCityCode&quot;, varCityCode);&#xD;&#xA;userIDElement.SetAttribute(&quot;POS_Type&quot;, &quot;1&quot;);&#xD;&#xA;securityHostedUserElement.AppendChild(userIDElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add awsse:Session element&#xD;&#xA;XmlElement sessionElement = xmlDoc.CreateElement(&quot;awsse&quot;, &quot;Session&quot;, &quot;http://xml.amadeus.com/2010/06/Session_v3&quot;);&#xD;&#xA;headerElement.AppendChild(sessionElement);&#xD;&#xA;sessionElement.SetAttribute(&quot;TransactionStatusCode&quot;, &quot;Start&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Create the Body element&#xD;&#xA;XmlElement bodyElement = xmlDoc.CreateElement(&quot;soapenv&quot;, &quot;Body&quot;, &quot;http://schemas.xmlsoap.org/soap/envelope/&quot;);&#xD;&#xA;envelopeElement.AppendChild(bodyElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Create the Command_Cryptic element&#xD;&#xA;XmlElement commandCrypticElement = xmlDoc.CreateElement(&quot;&quot;, &quot;Command_Cryptic&quot;, &quot;&quot;);&#xD;&#xA;bodyElement.AppendChild(commandCrypticElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add messageAction element&#xD;&#xA;XmlElement messageActionElement = xmlDoc.CreateElement(&quot;&quot;, &quot;messageAction&quot;, &quot;&quot;);&#xD;&#xA;commandCrypticElement.AppendChild(messageActionElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add messageFunctionDetails element&#xD;&#xA;XmlElement messageFunctionDetailsElement = xmlDoc.CreateElement(&quot;&quot;, &quot;messageFunctionDetails&quot;, &quot;&quot;);&#xD;&#xA;messageActionElement.AppendChild(messageFunctionDetailsElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add messageFunction element&#xD;&#xA;XmlElement messageFunctionElement = xmlDoc.CreateElement(&quot;&quot;, &quot;messageFunction&quot;, &quot;&quot;);&#xD;&#xA;messageFunctionElement.InnerText = &quot;M&quot;;&#xD;&#xA;messageFunctionDetailsElement.AppendChild(messageFunctionElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add longTextString element&#xD;&#xA;XmlElement longTextStringElement = xmlDoc.CreateElement(&quot;&quot;, &quot;longTextString&quot;, &quot;&quot;);&#xD;&#xA;commandCrypticElement.AppendChild(longTextStringElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Add textStringDetails element&#xD;&#xA;XmlElement textStringDetailsElement = xmlDoc.CreateElement(&quot;&quot;, &quot;textStringDetails&quot;, &quot;&quot;);&#xD;&#xA;textStringDetailsElement.InnerText = &quot;TJQ/SOF/D-20JAN5FEB&quot;;&#xD;&#xA;longTextStringElement.AppendChild(textStringDetailsElement);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Return the XML string&#xD;&#xA;string xmlResult = xmlDoc.InnerXml;&#xD;&#xA;out_soapBody = xmlResult;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Print the XML result to the console&#xD;&#xA;Console.WriteLine(&quot;XML Result:&quot;);&#xD;&#xA;Console.WriteLine(xmlResult);" DisplayName="Invoke Code Generate SOAP Body" sap:VirtualizedContainerService.HintSize="450,165.33333333333334" sap2010:WorkflowViewState.IdRef="InvokeCode_2" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <OutArgument x:TypeArguments="x:String" x:Key="out_soapBody">[soapBody]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_nonce">[credNonce]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_created">[credCreated]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_password">[credPassword]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:HttpClient ClientCertificate="{x:Null}" ClientCertificatePassword="{x:Null}" ConsumerKey="{x:Null}" ConsumerSecret="{x:Null}" ContinueOnError="{x:Null}" FileAttachments="{x:Null}" OAuth1Token="{x:Null}" OAuth1TokenSecret="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" ResourcePath="{x:Null}" ResponseAttachment="{x:Null}" ResponseHeaders="{x:Null}" SecureClientCertificatePassword="{x:Null}" SecurePassword="{x:Null}" Username="{x:Null}" AcceptFormat="XML" AuthenticationType="None" Body="[soapBody]" BodyFormat="application/xml" DisplayName="HTTP Request" EnableSSLVerification="True" EndPoint="[endPoint]" sap:VirtualizedContainerService.HintSize="450,72" sap2010:WorkflowViewState.IdRef="HttpClient_1" Method="POST" Result="[resContent]" StatusCode="[resStatus]" TimeoutMS="6000">
      <ui:HttpClient.Attachments>
        <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
      </ui:HttpClient.Attachments>
      <ui:HttpClient.Cookies>
        <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
      </ui:HttpClient.Cookies>
      <ui:HttpClient.Headers>
        <InArgument x:TypeArguments="x:String" x:Key="Content-Type">text/xml; charset=utf-8;application/xml</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="SOAPAction">http://webservices.amadeus.com/HSFREQ_07_3_1A</InArgument>
      </ui:HttpClient.Headers>
      <ui:HttpClient.Parameters>
        <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
      </ui:HttpClient.Parameters>
      <ui:HttpClient.UrlSegments>
        <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
      </ui:HttpClient.UrlSegments>
    </ui:HttpClient>
    <If Condition="[resStatus = 200]" sap:VirtualizedContainerService.HintSize="450,613.3333333333334" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="376,429.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="strResult" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="// Assuming soapResponse contains your SOAP API response XML as a string&#xD;&#xA;string soapResponse = in_response;&#xD;&#xA;&#xD;&#xA;// Load the XML string into an XDocument&#xD;&#xA;XDocument xdoc = XDocument.Parse(soapResponse);&#xD;&#xA;&#xD;&#xA;// Find the &quot;textStringDetails&quot; element within the &quot;Command_CrypticReply&quot;&#xD;&#xA;var textStringDetailsElement = xdoc.Descendants(&quot;{http://xml.amadeus.com/HSFRES_07_3_1A}Command_CrypticReply&quot;)&#xD;&#xA;                                   .Elements(&quot;{http://xml.amadeus.com/HSFRES_07_3_1A}longTextString&quot;)&#xD;&#xA;                                   .Elements(&quot;{http://xml.amadeus.com/HSFRES_07_3_1A}textStringDetails&quot;)&#xD;&#xA;                                   .FirstOrDefault();&#xD;&#xA;&#xD;&#xA;// Check if the element is found&#xD;&#xA;if (textStringDetailsElement != null)&#xD;&#xA;{&#xD;&#xA;    // Get the value within the &quot;textStringDetails&quot; element&#xD;&#xA;    string textStringDetailsValue = textStringDetailsElement.Value;&#xD;&#xA;&#xD;&#xA;    // Now you can use the extracted value as needed&#xD;&#xA;    // For example, print it to the Output panel&#xD;&#xA;    Console.WriteLine(&quot;textStringDetailsValue: &quot; + textStringDetailsValue);&#xD;&#xA;&#x9;out_finalResult = textStringDetailsValue;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    // Handle the case where the element is not found&#xD;&#xA;    Console.WriteLine(&quot;textStringDetails element not found in SOAP response&quot;);&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="334,165.33333333333334" sap2010:WorkflowViewState.IdRef="InvokeCode_4" Language="CSharp">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_response">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="resContent" />
              </InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="out_finalResult">
                <VisualBasicReference x:TypeArguments="x:String" ExpressionText="strResult" />
              </OutArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
          <ui:WriteTextFile File="{x:Null}" DisplayName="Write Text File" FileName="Result Table.txt" sap:VirtualizedContainerService.HintSize="334,136.66666666666666" sap2010:WorkflowViewState.IdRef="WriteTextFile_2" Text="[strResult]" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_4" />
      </If.Else>
    </If>
    <Sequence sap:VirtualizedContainerService.HintSize="450,104.66666666666667" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Sequence>
  </Sequence>
</Activity>